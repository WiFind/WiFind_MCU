<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [WiFind Configuration\WiFind Configuration.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image WiFind Configuration\WiFind Configuration.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu Oct 22 01:28:07 2015
<BR><P>
<H3>Maximum Stack Usage =        116 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6e]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">os_error</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DebugMon_Handler</a><BR>
 <LI><a href="#[13]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2f]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[12]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4]">DebugMon_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[20]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[14]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[8]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[b]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1f]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[9]">RTC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[17]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[18]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[16]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[f]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[21]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from rtx_conf_cm.o(.data)
 <LI><a href="#[30]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[32]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[2f]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[22]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[23]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[26]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[27]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[28]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[29]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[2a]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[2b]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[2c]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[2c]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadGetId)
 <LI><a href="#[2d]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[2d]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadTerminate)
 <LI><a href="#[2e]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[31]">uart_thread</a> from uart.o(i.uart_thread) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[34]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[36]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[9e]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[8e]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[9f]"></a>os_set_env</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler &rArr; rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[43]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>HAL_GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[44]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[42]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[46]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[48]"></a>HAL_MspInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[49]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[50]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4b]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[51]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[52]"></a>HAL_UART_MspInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32l0xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_UART_Receive</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[59]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[5d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, system_stm32l0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[55]"></a>UART_CheckIdleState</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[53]"></a>UART_SetConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[58]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5e]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[87]"></a>_init_box</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[5f]"></a>isrMessageGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[61]"></a>isrMessagePut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[64]"></a>isrSignalSet</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[66]"></a>isr_evt_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[60]"></a>isr_mbx_receive</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[63]"></a>isr_mbx_send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>osKernelInitialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[39]"></a>osKernelStart</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[6c]"></a>osMessageGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[45]"></a>osSignalSet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[98]"></a>osSignalWait</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSignalWait
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[38]"></a>osThreadCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[30]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[6a]"></a>osThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>osThreadTerminate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>osTimerCall</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerCall
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[32]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[2f]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[8a]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[3e]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[22]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[93]"></a>rt_alloc_mem</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[6f]"></a>rt_block</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>

<P><STRONG><a name="[73]"></a>rt_chk_robin</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[75]"></a>rt_dec_dly</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[76]"></a>rt_dispatch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[78]"></a>rt_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[7b]"></a>rt_evt_set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[7c]"></a>rt_evt_wait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[23]"></a>rt_free_box</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[94]"></a>rt_free_mem</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[71]"></a>rt_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[90]"></a>rt_init_mem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[88]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[7e]"></a>rt_init_stack</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[62]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[92]"></a>rt_mbx_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[7f]"></a>rt_mbx_psh</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[81]"></a>rt_mbx_wait</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[3b]"></a>rt_pop_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[68]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[67]"></a>rt_psq_enq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[70]"></a>rt_put_dly</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[74]"></a>rt_put_prio</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[77]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[84]"></a>rt_resort_prio</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[80]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[7a]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[79]"></a>rt_rmv_dly</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[85]"></a>rt_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[83]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[3a]"></a>rt_stk_check</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[72]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[86]"></a>rt_sys_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[89]"></a>rt_sys_start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[3c]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8c]"></a>rt_tsk_create</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[8d]"></a>rt_tsk_delete</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[8f]"></a>rt_tsk_prio</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[95]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[26]"></a>svcKernelInitialize</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[27]"></a>svcKernelStart</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[91]"></a>svcMessageCreate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[28]"></a>svcMessageGet</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[29]"></a>svcSignalSet</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[2a]"></a>svcSignalWait</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[2b]"></a>svcThreadCreate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[2c]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[2d]"></a>svcThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[2e]"></a>svcTimerCall</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[8b]"></a>sysTimerTick</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[31]"></a>uart_thread</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, uart.o(i.uart_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_thread &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>MX_GPIO_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemClock_Config</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClock_Config &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[4d]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[96]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
</UL>

<P><STRONG><a name="[82]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_ms2tick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[65]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[97]"></a>rt_timer_insert</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[7d]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
